<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hard on Do sth. Slowly</title>
    <link>/tags/hard/</link>
    <description>Recent content in hard on Do sth. Slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 12 Dec 2019 19:05:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/hard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 25. K 个一组翻转链表</title>
      <link>/post/leetcode-25/</link>
      <pubDate>Thu, 12 Dec 2019 19:05:00 +0800</pubDate>
      
      <guid>/post/leetcode-25/</guid>
      <description>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。
如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
示例 :
给定这个链表：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5
当 k = 2 时，应当返回: 2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5
当 k = 3 时，应当返回: 3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5
说明 :
你的算法只能使用常数的额外空间。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/reverse-nodes-in-k-group 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 做这道题目的时候错了几次，这道题目不难，关键点是对细节和边界条件的处理。这道题目基本是反转链表的变形。
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { if (head == nullptr) return head; using lp = ListNode*; lp t1, t2, tmp, t3 = head, pt = nullptr; int cnt = 0; while (true &amp;amp;&amp;amp; t3 !</description>
    </item>
    
  </channel>
</rss>