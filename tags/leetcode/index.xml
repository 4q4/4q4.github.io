<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on Do sth. Slowly</title>
    <link>/tags/leetcode/</link>
    <description>Recent content in LeetCode on Do sth. Slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 27 Nov 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 1268. 搜索推荐系统</title>
      <link>/post/leetcode-1268/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>/post/leetcode-1268/</guid>
      <description>LeetCode 1268. 搜索推荐系统
输入一个词典，然后输入一个单词，对于单词的每一个前缀，输出字典中以这个前缀开始的单词的字典序最小的 3 个单词。词典长度 1000，词典中每个单词的长度 20000，目标单词长度 1000.
这道题目开始的想法是字典树。可是数据集的范围太大，字典树占用空间太大。然而也没有想到什么好的方法，最后还是用常规的字典树写了一下，竟然过了。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; using VS = vector&amp;lt;string&amp;gt;; struct TrieTree { char value; bool is_end; TrieTree *children[26]; TrieTree() { for (int i = 0; i &amp;lt; 26; i++) children[i] = nullptr; is_end = false; } }; void insert_word(TrieTree *root, string s) { for (auto x: s) { int pos = x - &amp;#39;a&amp;#39;; if (nullptr != root-&amp;gt;children[pos]) { root = root-&amp;gt;children[pos]; } else { TrieTree *tmp = new TrieTree(); tmp-&amp;gt;value = x; root-&amp;gt;children[pos] = tmp; root = tmp; } } root-&amp;gt;is_end = true; } void print_tree(TrieTree *root, string s, vector&amp;lt;string&amp;gt; &amp;amp;words) { for (int i = 0; i &amp;lt; 26; i++) { TrieTree *child = root-&amp;gt;children[i]; if (nullptr !</description>
    </item>
    
    <item>
      <title>LeetCode LCP 3. 机器人大冒险</title>
      <link>/post/leetcode-lcp-3/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>/post/leetcode-lcp-3/</guid>
      <description>LeetCode LCP 3. 机器人大冒险
这道题目考察对循环节的理解。开始想得有点儿复杂，分析之后可以发现，关键是如何判断某个点是否在路径上。由于坐标范围过大，显然不能把整条路径计算出来。但是由于整个路径是由相同的路径连起来的，所以考虑循环节。对于一个障碍，找到这个点对应的循环节的起点，然后从起点开始，按照命令把这个循环节里面的点都求一遍，如果某个点能够和这个障碍相等，那么说明可以碰到障碍。对于终点，同样的处理方式，如果所在循环节中的某个点和终点相等，那么说明可以到达终点。命令的个数是 10^3 障碍个数也是 10^3 所以整个复杂度是 10^6 。这是可以接受的。
可以看出整个过程主要的复杂度是如何判断某个障碍是否和对应的循环节中的某个点重合。
上面这种对循环节的处理方式不是很优雅，其实可以把任何一个循环节都对应到第一个循环，然后把这个循环节对应的障碍点也对应到第一个循环节的范围中。这样可以就把第一个循环节的所有的点放到集合中，然后只需要判断障碍点是不是在集合中即可。把点放到集合中的处理方式有很多，可以拼接成字符串，也可以通过其它处理方式，只要保证是一一映射即可。讨论区中看到一种比较有趣的做法，对于一个点 (x, y) 把它映射成一个整数 (long)(x) &amp;lt;&amp;lt; 30 | y 这是由于题目中点的坐标范围是 10^9 而 10^9 &amp;lt; (1L &amp;lt;&amp;lt; 30) ，所以这可以保证是一一映射。
把任何一个点映射到第一个循环节中的点的方式：找到它所在的第 N 个循环节，然后横纵坐标分别减去 N * deltax 和 N * deltay ，其中 deltax 是在一个循环节中横座标的增量。
所以说做题的时候，有的时候虽然能够做出来，可是还是不能够想到最简单和最优雅的处理方式。还是需要多练习和积累经验。一道题目是值得多次做的，做过第一遍之后，以后应该写出最优的解法和实现方式。
#include &amp;lt;vector&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;cmath&amp;gt; using namespace std; class Solution { public: int deltax, deltay; bool robot(string command, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; obstacles, int x, int y) { deltax = 0, deltay = 0; for (auto i: command) if (i == &amp;#39;U&amp;#39;) deltay++; else deltax++; for (auto i: obstacles) { if (i[0] &amp;gt; x || i[1] &amp;gt; y) continue; if (check(command, i[0], i[1])) return false; } return check(command, x, y); } bool check(string cmd, int x, int y) { int N, startx, starty, N1; if (cmd[0] == &amp;#39;U&amp;#39;) { N = ceil(1.</description>
    </item>
    
  </channel>
</rss>